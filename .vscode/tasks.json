{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Compile che-operator code",
            // "command": "GOOS=linux GOARCH=${ARCH} CGO_ENABLED=0 go build -mod=vendor -o /tmp/che-operator/che-operator cmd/manager/main.go",
            "command": "CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=on go build -a -o /tmp/che-operator/che-operator main.go",
            "options": {
                "env": {
                    "ARCH": "amd64"
                }
            },
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Format che-operator code",
            "command": "go fmt ./...",
            "options": {
                "env": {
                    "ARCH": "amd64"
                }
            },
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Update che-operator dependencies",
            "command": "go mod vendor",
            "options": {
                "env": {
                    "ARCH": "amd64"
                }
            },
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Run che-operator mock tests",
            "command": "go test -mod=vendor -v ./...",
            "options": {
                "env": {
                    "MOCK_API": "true"
                }
            },
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },


        {
            "label": "Update resources",
            "command": "./olm/update-resources.sh",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Update CR/CRDs",
            "command": "make generate; make manifests",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Build and push custom che-operator image: '${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator:nightly'",
            "command": "make docker-build docker-push IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator:nightly\"",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Install OLM on the cluster",
            "command": "operator-sdk olm install",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },

        {
            "label": "Build test bundle",
            "command": "export BUNDLE_IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator:v0.0.1\"; make bundle IMG=${BUNDLE_IMG}; make bundle-build bundle-push BUNDLE_IMG=${BUNDLE_IMG}",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "Install che-operator via OLM",
            "command": "operator-sdk run bundle ${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator-bundle:v0.0.1; kubectl apply -f config/samples/cache_v1_checluster.yaml -n eclipse-che",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "UnInstall che-operator via OLM",
            "command": "operator-sdk cleanup che-operator || operator-sdk cleanup che-operator",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },

        {
            "label": "Install che-operator outside cluster",
            "command": "make install run",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "UnInstall che-operator outside cluster",
            "command": "make uninstall run",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },

        {
            "label": "Deploy che-operator",
            "command": "make deploy IMG=\"${IMAGE_REGISTRY_HOST}/${IMAGE_REGISTRY_USER_NAME}/che-operator:nightly\"; kubectl apply -f config/samples/cache_v1_checluster.yaml -n eclipse-che",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
        {
            "label": "UnDeploy che-operator",
            "command": "make undeploy",
            "type": "shell",
            "args": [],
            "problemMatcher": [
                "$go"
            ],
            "presentation": {
                "reveal": "always"
            },
            "group": "build"
        },
    ]
}
